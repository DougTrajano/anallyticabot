version: '3.9'

services:
  database:
    container_name: database
    image: postgres:16.1-alpine3.19
    restart: always
    environment:
      - POSTGRES_USER=${DATABASE_USER:-postgres}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-postgres}
      - POSTGRES_MULTIPLE_DATABASES=anallyticabot,keycloak
    ports:
      - 5432:5432
    volumes:
      - database:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d

  # keycloak:
  #   container_name: keycloak
  #   image: quay.io/keycloak/keycloak:21.1.0
  #   command: start-dev
  #   restart: always
  #   environment:
  #     KEYCLOAK_ADMIN: admin
  #     KEYCLOAK_ADMIN_PASSWORD: admin
  #     KC_DB: postgres
  #     KC_DB_URL: jdbc:postgresql://database:5432/keycloak
  #     KC_DB_URL_HOST: database
  #     KC_DB_URL_DATABASE: keycloak
  #     KC_DB_USERNAME: ${DATABASE_USER:-postgres}
  #     KC_DB_PASSWORD: ${DATABASE_PASSWORD:-postgres}
  #   ports:
  #     - 3333:8080
  #   depends_on:
  #     - database

  backend:
    container_name: backend
    build: .
    command: backend
    # restart: always
    ports:
      - 8000:8000
    depends_on:
      - database
    environment:
      LOGGING_LEVEL: DEBUG
      DATABASE_HOST: database
      DATABASE_PORT: 5432
      DATABASE_NAME: anallyticabot
      DATABASE_USER: ${DATABASE_USER:-postgres}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-postgres}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      WORKER_IMAGE_URI: ${WORKER_IMAGE_URI}
      # FARGATE_TASK_ROLE_ARN: ${FARGATE_TASK_ROLE_ARN}
      # FARGATE_EXECUTION_ROLE_ARN: ${FARGATE_EXECUTION_ROLE_ARN}
      # FARGATE_SECURITY_GROUP_IDS: ${FARGATE_SECURITY_GROUP_IDS}
      # FARGATE_SUBNET_IDS: ${FARGATE_SUBNET_IDS}
      # FARGATE_TASK_TAGS: ${FARGATE_TASK_TAGS}
      # WORKER_BACKEND: fargate
      WORKER_BACKEND: docker
    volumes:
      - .:/app # development only
      - /var/run/docker.sock:/var/run/docker.sock # it's necessary to run docker inside docker

  frontend:
    container_name: frontend
    build: .
    command: frontend
    # restart: always
    ports:
      - 8501:8501
    depends_on:
      - backend

volumes:
  database:
